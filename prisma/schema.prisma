// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum VerificationType {
  REGISTRATION
  PASSWORD_RESET
  EMAIL_CHANGE
}

enum Format {
  ONSITE
  ONLINE
  HYBRID
}

model Organization {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String
  logoUrl     String?  @map("logo_url")
  websiteUrl  String?  @map("website_url")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")
  users       User[]

  @@map("organizations")
}

model User {
  id             Int            @id @default(autoincrement())
  email          String         @unique
  name           String
  password       String
  verifiedAt     DateTime?      @map("verified_at")
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @default(now()) @map("updated_at")
  organizationId Int?           @map("organization_id")
  organization   Organization?  @relation(fields: [organizationId], references: [id])
  verifications  Verification[]
  events         Event[]

  @@map("users")
}

model Verification {
  id        Int              @id @default(autoincrement())
  type      VerificationType @default(REGISTRATION)
  expiresAt DateTime         @map("expires_at")
  token     String
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @default(now()) @map("updated_at")
  userId    Int
  users     User             @relation(fields: [userId], references: [id])

  @@map("verifications")
}

model Authentication {
  id    Int     @id @default(autoincrement())
  token String

  @@map("authentications")
}

model Event {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  format      Format
  isPublished Boolean    @map("is_published")
  bannerUrl   String     @map("banner_url")
  startDate   DateTime   @map("start_date")
  endDate     DateTime   @map("end_date")
  startTime   Int        @map("start_time")
  endTime     Int        @map("end_time")
  timezone    String     @default("Asia/Jakarta")
  ownerId     Int        @map("owner_id")
  categories  Category[]
  owner       User       @relation(fields: [ownerId], references: [id])
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @default(now()) @map("updated_at")
  agendas     Agenda[]
  faqs        Faq[]
  tiers       Tier[]

  @@map("events")
}

model Category {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  events    Event[]

  @@map("categories")
}

model Faq {
  id        Int      @id @default(autoincrement())
  question  String
  answer    String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  eventId   Int      @map("event_id")
  event     Event    @relation(fields: [eventId], references: [id])

  @@map("faqs")
}

model Agenda {
  id        Int      @id @default(autoincrement())
  startTime Int      @map("start_time")
  endTime   Int      @map("end_time")
  timezone  String   @default("Asia/Jakarta")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  eventId   Int      @map("event_id")
  event     Event    @relation(fields: [eventId], references: [id])

  @@map("agendas")
}

model Tier {
  id        Int      @id @default(autoincrement())
  name      String
  price     Int
  capacity  Int
  remains   Int
  format    Format
  benefits  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  eventId   Int      @map("event_id")
  event     Event    @relation(fields: [eventId], references: [id])
  tickets   Ticket[]

  @@map("tiers")
}

model Ticket {
  id        Int      @id @default(autoincrement())
  atendee   String
  email     String
  phone     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  tierId    Int      @map("tier_id")
  tier      Tier     @relation(fields: [tierId], references: [id])

  @@map("tickets")
}
